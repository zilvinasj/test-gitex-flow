/// <reference types="node" />
import { GitFlowBranch } from '../api/branches/GitFlowBranch';
import { GFlow } from '../gflow/GFlow';
import { Readable, Writable, Transform } from 'stream';
import { ConventionalCommitConfig, ProjectConfig } from '../configs';
import { ChangelogConfig } from '../configs/ChangelogConfig';
import { GitLog } from '../git/GitLog';
/**
 * Provides some utility functions.
 */
export declare class Utils {
    /**
     * Gets the current date formatted as yyyy-mm-dd.
     *
     * @returns date in fomat yyyy-mm-dd.
     */
    static getCurrDate(): string;
    /**
     * Executes a command and suppresses errors if they are thrown.
     *
     * @param command - Command to be executed.
     */
    static exec(command: () => Promise<string | void>): Promise<void>;
    /**
     * Prints the config to the console.
     *
     * @param gitFlow - The git flow instance the config should be printed.
     */
    static printConfig(gitFlow: GFlow): Promise<void>;
    /**
     * Prints the branches to the console.
     *
     * @param gitFlowBranch - The branch type to be printed.
     */
    static printBranches(gitFlowBranch: GitFlowBranch): Promise<void>;
    /**
     * Pipes a readable stream asynchrounously to a writable stream with error handling.
     *
     * @param src - The readable source stream.
     * @param dest - The writable destination stream.
     * @param destroy - Specifies if the streams should be destroyed on finish.
     *
     * @returns Promise on copying stream properly.
     */
    static pipe(src: Readable, dest: Writable, destroy?: boolean): Promise<void>;
    /**
     * Derives the [[ChangelogConfig]] from a given [[projectConfig]].
     *
     * @param projectConfig - The project configuration.
     *
     * @returns The derived changelog config.
     */
    static deriveChangelogConfig(projectConfig?: ProjectConfig): ChangelogConfig<Record<string, unknown>>;
    /**
     * Parses conventional commit messages to a [[GitLog]] array.
     *
     * @param commitMessages - The commit messages.
     * @param conventionalCommitConfig - The configuration of the conventional commit parser.
     * @returns The parsed conventional commit messages as an array of [[GitLogs]].
     */
    static parseConventionalCommits(commitMessages: string[], conventionalCommitConfig?: ConventionalCommitConfig): Promise<GitLog[]>;
    /**
     * Parses conventional commit messages via a stream.Transform pipe.
     *
     * @param conventionalCommitConfig - The configuration of the conventional commit parser.
     * @returns The parsed conventional commit messages as transformed stream.
     */
    static parseConventionalCommitsViaPipe(conventionalCommitConfig?: ConventionalCommitConfig): Transform;
}
