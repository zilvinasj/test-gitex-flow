import { ProjectConfig } from '../configs/ProjectConfig';
import { ChangelogConfig } from '../configs/ChangelogConfig';
/**
 * Representing an API for handling git flow SemVer.
 */
export declare class GitFlowNodeProject {
    private readonly logger;
    static readonly DefaultVersionFile = "package.json";
    static readonly DefaultBumpVersionFiles: string[];
    private options;
    private gitRepository;
    /**
     * Initializes a new instance of this class.
     *
     * @param options - Options of the git flow node project instance.
     */
    constructor(options?: ProjectConfig);
    /**
     * Checks out the given branch of the project.
     *
     * @param branchName - Name of the branch to be checked out.
     */
    checkoutBranch(branchName: string): Promise<void>;
    /**
     * Stashes the uncommited changes from the current branch.
     *
     * @returns `true` if stash was successful, otherwise `false`.
     */
    stash(): Promise<boolean>;
    /**
     * Pops the latest stash.
     *
     * @returns Promise on popping the latest stash.
     */
    popLatestStash(): Promise<void>;
    /**
     * Gets the current branch.
     *
     * @returns The current branch checked out.
     */
    getCurrentBranch(): Promise<string>;
    /**
     *  Writes the version and commits the changes in the git repository.
     *
     * @param version - Version to commit.
     */
    writeVersion(version: string): Promise<void>;
    /**
     * Updates the changelog with the changes since the last release.
     *
     * @param changelogConfig - The changelog configuration.
     * @param version - Version the changelog is created for.
     * @param name - Name of the release.
     */
    updateChangelog<T>(changelogConfig: ChangelogConfig<T>, version?: string, name?: string): Promise<void>;
    /**
     * Commits the changes of the git repository.
     *
     * @param commitVersionFiles - Indicates if the defined version files should be committed if they exists.
     * @param commitChangelog - Indicates if the changelog should be committed.
     *
     * @returns The hash of the commit.
     */
    commitChanges(commitVersionFiles?: boolean, commitChangelog?: boolean): Promise<string>;
    /**
     * Gets the current version from the package.json.
     *
     * @returns The version of the project.
     */
    getVersion(): Promise<string>;
    private writeVersionToFile;
    private getContext;
}
