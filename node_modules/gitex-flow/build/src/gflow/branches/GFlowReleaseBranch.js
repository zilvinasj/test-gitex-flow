"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GFlowReleaseBranch = void 0;
const GitFlowNodeProject_1 = require("../../tools/GitFlowNodeProject");
const GFlowBranch_1 = require("./GFlowBranch");
const Utils_1 = require("../../tools/Utils");
/**
 * This class extending a release branch with some helpful functionality.
 */
class GFlowReleaseBranch extends GFlowBranch_1.GFlowBranch {
    /**
     * Initializes a new instance of this class.
     *
     * @param gitFlowBranch - Git flow branch to be wrapped.
     * @param options - Git flow node project options.
     */
    constructor(gitFlowBranch, options) {
        super(gitFlowBranch, options);
    }
    /**
     * Creates and starts a new release branch.
     *
     * @param name - Name of the branch to be started.
     * @param base - Base of the branch should be started from.
     *
     * @returns The name of the release branch.
     */
    start(name, base) {
        const _super = Object.create(null, {
            stashChanges: { get: () => super.stashChanges },
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const version = yield this.generateBranchName(name);
            if (!version) {
                throw new Error('Failed to calculate the version from the current repository.');
            }
            const project = new GitFlowNodeProject_1.GitFlowNodeProject(this.projectConfig);
            const stashed = yield _super.stashChanges.call(this, project);
            const branchName = yield _super.start.call(this, version, base);
            yield project.writeVersion(version);
            const changelogConfig = Utils_1.Utils.deriveChangelogConfig(this.projectConfig);
            yield project.updateChangelog(changelogConfig, version);
            yield project.commitChanges();
            if (stashed) {
                yield this.popStashedChanges(project);
            }
            return branchName;
        });
    }
    /**
     * Merges and finishes the branch of the branch type '[[type]]'.
     *
     * @param name - Name of the branch to be finished.
     * @param msg - Message to be set for finishing the branch.
     */
    finish(name, msg) {
        const _super = Object.create(null, {
            finish: { get: () => super.finish }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const project = new GitFlowNodeProject_1.GitFlowNodeProject(this.projectConfig);
            const version = yield this.getVersion(project, name);
            msg = msg !== null && msg !== void 0 ? msg : version;
            yield _super.finish.call(this, version, msg);
        });
    }
    getVersion(project, name) {
        return __awaiter(this, void 0, void 0, function* () {
            let version = name;
            if (!version) {
                const releaseBranches = yield this.list();
                if (releaseBranches.length == 0) {
                    version = yield project.getVersion();
                }
                // There is only one release branch
                version = releaseBranches[0];
            }
            return version;
        });
    }
}
exports.GFlowReleaseBranch = GFlowReleaseBranch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR0Zsb3dSZWxlYXNlQnJhbmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2dmbG93L2JyYW5jaGVzL0dGbG93UmVsZWFzZUJyYW5jaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQSx1RUFBb0U7QUFFcEUsK0NBQTRDO0FBQzVDLDZDQUEwQztBQUUxQzs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEseUJBQVc7SUFDakQ7Ozs7O09BS0c7SUFDSCxZQUFZLGFBQTRCLEVBQUUsT0FBdUI7UUFDL0QsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNVLEtBQUssQ0FBQyxJQUFhLEVBQUUsSUFBYTs7Ozs7O1lBQzdDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO2FBQ2pGO1lBQ0QsTUFBTSxPQUFPLEdBQUcsSUFBSSx1Q0FBa0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDM0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFNLFlBQVksWUFBQyxPQUFPLENBQUMsQ0FBQztZQUNsRCxNQUFNLFVBQVUsR0FBRyxNQUFNLE9BQU0sS0FBSyxZQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwRCxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEMsTUFBTSxlQUFlLEdBQUcsYUFBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN4RSxNQUFNLE9BQU8sQ0FBQyxlQUFlLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3hELE1BQU0sT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQzlCLElBQUksT0FBTyxFQUFFO2dCQUNYLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3ZDO1lBQ0QsT0FBTyxVQUFVLENBQUM7UUFDcEIsQ0FBQztLQUFBO0lBRUQ7Ozs7O09BS0c7SUFDVSxNQUFNLENBQUMsSUFBYSxFQUFFLEdBQVk7Ozs7O1lBQzdDLE1BQU0sT0FBTyxHQUFHLElBQUksdUNBQWtCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzNELE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckQsR0FBRyxHQUFHLEdBQUcsYUFBSCxHQUFHLGNBQUgsR0FBRyxHQUFJLE9BQU8sQ0FBQztZQUNyQixNQUFNLE9BQU0sTUFBTSxZQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuQyxDQUFDO0tBQUE7SUFFYSxVQUFVLENBQUMsT0FBMkIsRUFBRSxJQUFhOztZQUNqRSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDbkIsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDWixNQUFNLGVBQWUsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDMUMsSUFBSSxlQUFlLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtvQkFDL0IsT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO2lCQUN0QztnQkFDRCxtQ0FBbUM7Z0JBQ25DLE9BQU8sR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDOUI7WUFDRCxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDO0tBQUE7Q0FDRjtBQTlERCxnREE4REMifQ==