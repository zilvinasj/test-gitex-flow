import { GitFlowBaseBranchType, GitFlowBranch, GitFlowBranchType } from '../../api/branches/GitFlowBranch';
import { GitFlowBranchConfig } from '../../api/GitFlowBranchConfig';
import { Logger } from 'log4js';
import { GitFlowNodeProject } from '../../tools/GitFlowNodeProject';
import { ProjectConfig } from '../../configs/ProjectConfig';
/**
 * This class represents an abstract GFlow branch with some basic functionality.
 */
export declare class GFlowBranch implements GitFlowBranch {
    readonly type: GitFlowBranchType;
    readonly defaultBase: GitFlowBaseBranchType;
    private readonly gitFlowBranch;
    protected readonly projectConfig?: ProjectConfig;
    protected readonly logger: Logger;
    /**
     * Initializes a new instance of this class.
     *
     * @param gitFlowBranch - Git flow branch to be wrapped.
     * @param options - Git flow node project options.
     */
    constructor(gitFlowBranch: GitFlowBranch, options?: ProjectConfig);
    /**
     * Gets the git flow branch config.
     *
     * @returns The configuration of the gitex flow branch.
     */
    getConfig(): Promise<GitFlowBranchConfig>;
    /**
     * Lists all branches of the type '[[type]]'.
     *
     * @returns The list of branches.
     */
    list(): Promise<string[]>;
    /**
     * Creates and starts a new branch of the type '[[type]]'.
     *
     * @param name - Name of the branch to be started.
     * @param base - Base of the branch should be started from.
     *
     * @returns The name of the started branch.
     */
    start(name?: string, base?: string): Promise<string>;
    /**
     * Merges and finishes the branch of the branch type '[[type]]'.
     *
     * @param name - Name of the branch to be finished.
     * @param msg - Message to be set for finishing the branch.
     */
    finish(name?: string, msg?: string): Promise<void>;
    /**
     * Generates an default branch name.
     *
     * @param name - A custom name for the branch.
     *
     * @returns The generated branch name.
     */
    generateBranchName(name?: string): Promise<string | undefined>;
    /**
     * Gets the branch name including the git-flow configuration.
     *
     * @param name - A given branch name without prefix.
     *
     * @returns The generated name.
     */
    protected generateBranchNameFromConfig(name: string): Promise<string>;
    /**
     * Stashes the current local changes.
     *
     * @param project - The git project to be stashed.
     * @returns Returns `true` if changes were stashed. Otherwise `false`.
     */
    protected stashChanges(project: GitFlowNodeProject): Promise<boolean>;
    /**
     * Pops the latest stash into to local repository.
     *
     * @param project - The git project the stash should be popped from.
     */
    protected popStashedChanges(project: GitFlowNodeProject): Promise<void>;
}
