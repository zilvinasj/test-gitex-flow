"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GFlow = void 0;
const GFlowReleaseBranch_1 = require("./branches/GFlowReleaseBranch");
const GFlowHotFixBranch_1 = require("./branches/GFlowHotFixBranch");
const log4js_1 = require("log4js");
const GFlowBranch_1 = require("./branches/GFlowBranch");
/**
 * GitFlow wrapper extending functionality to a common git flow implementation.
 */
class GFlow {
    /**
     * Initializes a new instance of this class.
     *
     * @param gitFlow - GitFlow implementation.
     * @param options - Options for configuring the GFlow.
     */
    constructor(gitFlow, options) {
        options = this.ensureDefaults(options);
        if (options.log4jsConfig) {
            log4js_1.configure(options.log4jsConfig);
        }
        this.gitFlow = gitFlow;
        this.options = options;
        this.feature = new GFlowBranch_1.GFlowBranch(this.gitFlow.feature, options.projectConfig);
        this.bugfix = new GFlowBranch_1.GFlowBranch(this.gitFlow.bugfix, options.projectConfig);
        this.release = new GFlowReleaseBranch_1.GFlowReleaseBranch(this.gitFlow.release, options.projectConfig);
        this.hotfix = new GFlowHotFixBranch_1.GFlowHotFixBranch(this.gitFlow.hotfix, options.projectConfig);
        this.support = new GFlowBranch_1.GFlowBranch(this.gitFlow.support, options.projectConfig);
        this.config = this.gitFlow.config;
    }
    /**
     * Setup a git repository for git flow usage.
     *
     * @param config - The git flow configuration.
     * @param force - Force reinitialisation if git flow already initialized.
     */
    init(config, force) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gitFlow.init(config !== null && config !== void 0 ? config : this.options.gitFlowConfig, force);
        });
    }
    /**
     * Provides the version of the git flow implementation.
     *
     * @returns The version of git flow.
     */
    version() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.gitFlow.version();
        });
    }
    ensureDefaults(options) {
        options = options !== null && options !== void 0 ? options : {};
        if (!options.projectConfig) {
            options.projectConfig = {
                projectPath: process.cwd(),
            };
        }
        if (!options.log4jsConfig) {
            options.log4jsConfig = {
                appenders: { console: { type: 'console' } },
                categories: { default: { appenders: ['console'], level: 'info' } },
            };
        }
        return options;
    }
}
exports.GFlow = GFlow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR0Zsb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2Zsb3cvR0Zsb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBS0Esc0VBQW1FO0FBQ25FLG9FQUFpRTtBQUNqRSxtQ0FBbUM7QUFDbkMsd0RBQXFEO0FBRXJEOztHQUVHO0FBQ0gsTUFBYSxLQUFLO0lBV2hCOzs7OztPQUtHO0lBQ0gsWUFBWSxPQUFnQixFQUFFLE9BQXFCO1FBQ2pELE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXZDLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN4QixrQkFBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqQztRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx5QkFBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUkseUJBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLHVDQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUkscUNBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSx5QkFBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNVLElBQUksQ0FBQyxNQUFzQixFQUFFLEtBQWU7O1lBQ3ZELE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxhQUFOLE1BQU0sY0FBTixNQUFNLEdBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkUsQ0FBQztLQUFBO0lBRUQ7Ozs7T0FJRztJQUNVLE9BQU87O1lBQ2xCLE9BQU8sTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RDLENBQUM7S0FBQTtJQUVPLGNBQWMsQ0FBQyxPQUFxQjtRQUMxQyxPQUFPLEdBQUcsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUksRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxhQUFhLEdBQUc7Z0JBQ3RCLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFO2FBQzNCLENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxZQUFZLEdBQUc7Z0JBQ3JCLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRTtnQkFDM0MsVUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO2FBQ25FLENBQUM7U0FDSDtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQXBFRCxzQkFvRUMifQ==