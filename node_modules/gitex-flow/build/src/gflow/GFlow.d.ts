import { GitFlow } from '../api/GitFlow';
import { GitFlowBranch } from '../api/branches/GitFlowBranch';
import { ConfigProvider } from '../api/ConfigProvider';
import { GitFlowConfig } from '../configs/GitFlowConfig';
import { GFlowConfig } from '../configs/GFlowConfig';
/**
 * GitFlow wrapper extending functionality to a common git flow implementation.
 */
export declare class GFlow implements GitFlow {
    feature: GitFlowBranch;
    bugfix: GitFlowBranch;
    release: GitFlowBranch;
    hotfix: GitFlowBranch;
    support: GitFlowBranch;
    readonly config: ConfigProvider<GitFlowConfig>;
    protected readonly options: GFlowConfig;
    private readonly gitFlow;
    /**
     * Initializes a new instance of this class.
     *
     * @param gitFlow - GitFlow implementation.
     * @param options - Options for configuring the GFlow.
     */
    constructor(gitFlow: GitFlow, options?: GFlowConfig);
    /**
     * Setup a git repository for git flow usage.
     *
     * @param config - The git flow configuration.
     * @param force - Force reinitialisation if git flow already initialized.
     */
    init(config?: GitFlowConfig, force?: boolean): Promise<void>;
    /**
     * Provides the version of the git flow implementation.
     *
     * @returns The version of git flow.
     */
    version(): Promise<string>;
    private ensureDefaults;
}
