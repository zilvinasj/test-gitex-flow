import { GitFlowBranchType } from '../api/branches/GitFlowBranch';
/**
 * All possible git flow actions can be applied.
 */
export declare type GitFlowAction = 'start' | 'finish' | 'list' | 'publish' | 'track' | 'diff' | 'rebase' | 'checkout' | 'pull' | 'delete' | 'init' | 'version' | 'config';
/**
 * Schema of a git flow command arguments.
 */
export interface GitFlowCommandArgs {
    type?: GitFlowBranchType;
    action?: GitFlowAction;
    name?: string;
    args?: string[];
    options?: string;
    repositoryPath?: string;
}
/**
 * Executer for git flow commands via command line.
 */
export declare class GitFlowBashExecuter {
    private static readonly logger;
    private static readonly GitFlowCommand;
    /**
     * Executes the a git flow command via command line.
     *
     * @param args - Arguments for git flow command execution.
     *
     * @returns The result of the executed command.
     */
    static execute(args: GitFlowCommandArgs): Promise<string>;
    /**
     * Executes the command via command line.
     *
     * @param cmd - The command should be executed via command line.
     * @param executionFolder - The base folder where the command should be started in.
     * @returns Standard output (stdout) of the started process.
     */
    private static execViaShell;
}
