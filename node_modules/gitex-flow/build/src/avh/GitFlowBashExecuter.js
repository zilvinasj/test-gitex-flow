"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitFlowBashExecuter = void 0;
const child_process_1 = require("child_process");
const log4js_1 = require("log4js");
/**
 * Executer for git flow commands via command line.
 */
class GitFlowBashExecuter {
    /**
     * Executes the a git flow command via command line.
     *
     * @param args - Arguments for git flow command execution.
     *
     * @returns The result of the executed command.
     */
    static execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let cmd = `${GitFlowBashExecuter.GitFlowCommand}`;
            if (args.type) {
                cmd += ` ${args.type}`;
            }
            if (args.action) {
                cmd += ` ${args.action}`;
            }
            if (args.options) {
                cmd += ` ${args.options}`;
            }
            if (args.name) {
                cmd += ` "${args.name}"`;
            }
            if (args.args) {
                cmd += ` "${args.args.join('" "')}"`;
            }
            GitFlowBashExecuter.logger.debug(`Executing '${cmd}'`);
            return yield GitFlowBashExecuter.execViaShell(cmd, args.repositoryPath);
        });
    }
    /**
     * Executes the command via command line.
     *
     * @param cmd - The command should be executed via command line.
     * @param executionFolder - The base folder where the command should be started in.
     * @returns Standard output (stdout) of the started process.
     */
    static execViaShell(cmd, executionFolder) {
        return new Promise((resolve, reject) => {
            child_process_1.exec(cmd, { cwd: executionFolder }, (error, stdout, stderr) => {
                if (error) {
                    reject(error);
                }
                else if (stderr) {
                    resolve(stderr);
                }
                else {
                    resolve(stdout);
                }
            });
        });
    }
}
exports.GitFlowBashExecuter = GitFlowBashExecuter;
GitFlowBashExecuter.logger = log4js_1.getLogger('GitFlowBashExecuter');
GitFlowBashExecuter.GitFlowCommand = 'git flow';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2l0Rmxvd0Jhc2hFeGVjdXRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hdmgvR2l0Rmxvd0Jhc2hFeGVjdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxpREFBcUM7QUFDckMsbUNBQW1DO0FBaUNuQzs7R0FFRztBQUNILE1BQWEsbUJBQW1CO0lBSTlCOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBTyxPQUFPLENBQUMsSUFBd0I7O1lBQ2xELElBQUksR0FBRyxHQUFHLEdBQUcsbUJBQW1CLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDbEQsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNiLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUN4QjtZQUNELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDMUI7WUFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUMzQjtZQUNELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDYixHQUFHLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7YUFDMUI7WUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ2IsR0FBRyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzthQUN0QztZQUNELG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZELE9BQU8sTUFBTSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMxRSxDQUFDO0tBQUE7SUFFRDs7Ozs7O09BTUc7SUFDSyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQVcsRUFBRSxlQUF3QjtRQUMvRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLG9CQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLGVBQWUsRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDNUQsSUFBSSxLQUFLLEVBQUU7b0JBQ1QsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNmO3FCQUFNLElBQUksTUFBTSxFQUFFO29CQUNqQixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ2pCO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDakI7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUFuREgsa0RBb0RDO0FBbkR5QiwwQkFBTSxHQUFHLGtCQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUMxQyxrQ0FBYyxHQUFHLFVBQVUsQ0FBQyJ9