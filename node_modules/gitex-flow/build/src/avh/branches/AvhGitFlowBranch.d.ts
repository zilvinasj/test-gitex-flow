import { GitFlowBaseBranchType, GitFlowBranch, GitFlowBranchType } from '../../api/branches/GitFlowBranch';
import { GitFlowBranchConfig } from '../../api/GitFlowBranchConfig';
/**
 * This class implements the basic functionality of a git flow branch.
 */
export declare abstract class AvhGitFlowBranch implements GitFlowBranch {
    private logger;
    private readonly repositoryPath?;
    /**
     * Initializes a new instance of this class.
     *
     * @param repoPath - The path to the git repository.
     */
    constructor(repoPath?: string);
    /**
     * {@inheritdoc}
     */
    abstract readonly type: GitFlowBranchType;
    /**
     * {@inheritdoc}
     */
    abstract readonly defaultBase: GitFlowBaseBranchType;
    /**
     * {@inheritdoc}
     */
    abstract getConfig(): Promise<GitFlowBranchConfig>;
    /**
     * {@inheritdoc}
     *
     * @returns The list of the currently opened branch.
     */
    list(): Promise<string[]>;
    /**
     * {@inheritdoc}
     *
     * @param name - Name of the branch to be started.
     * @param base - Base of the branch should be started from.
     * @returns The git reference of the create branch.
     */
    start(name?: string, base?: string): Promise<string>;
    /**
     * {@inheritdoc}
     *
     * @param name - Name of the branch to be finished.
     * @param msg - Message to be set for finishing the branch.
     */
    finish(name?: string, msg?: string): Promise<void>;
    /**
     * {@inheritdoc}
     *
     * @param name - A custom name for the branch.
     *
     * @returns The generated branch name.
     */
    generateBranchName(name?: string): Promise<string | undefined>;
    private getBranchNameFromConfig;
}
