"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupportGitFlowBranch = void 0;
const AvhGitFlowBranch_1 = require("./AvhGitFlowBranch");
/**
 * This class wraps the support branch of the AVH implementation.
 */
class SupportGitFlowBranch extends AvhGitFlowBranch_1.AvhGitFlowBranch {
    /**
     * Initializes a new instance of this class.
     *
     * @param repoPath - The path to the git repository.
     * @param configProvider - Git flow config provider.
     */
    constructor(repoPath, configProvider) {
        super(repoPath);
        /**
         * {@inheritdoc}
         */
        this.type = 'support';
        /**
         * {@inheritdoc}
         */
        this.defaultBase = 'master';
        this.configProvider = configProvider;
    }
    /**
     * {@inheritdoc}
     *
     * @param name - Name of the branch to be started.
     * @param base - Base of the branch should be started from.
     * @returns The git reference of the create branch.
     */
    start(name, base) {
        const _super = Object.create(null, {
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return _super.start.call(this, name, base !== null && base !== void 0 ? base : this.defaultBase);
        });
    }
    /**
     * {@inheritdoc}
     */
    finish() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('The AVH implementation does not support a finish on support branches.');
        });
    }
    /**
     * {@inheritdoc}
     *
     * @returns The configuration of the support git flow branch.
     */
    getConfig() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield ((_a = this.configProvider) === null || _a === void 0 ? void 0 : _a.get());
            return {
                prefix: config === null || config === void 0 ? void 0 : config.supportBranchPrefix,
            };
        });
    }
}
exports.SupportGitFlowBranch = SupportGitFlowBranch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VwcG9ydEdpdEZsb3dCcmFuY2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXZoL2JyYW5jaGVzL1N1cHBvcnRHaXRGbG93QnJhbmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUlBLHlEQUFzRDtBQUV0RDs7R0FFRztBQUNILE1BQWEsb0JBQXFCLFNBQVEsbUNBQWdCO0lBYXhEOzs7OztPQUtHO0lBQ0gsWUFBWSxRQUFpQixFQUFFLGNBQThDO1FBQzNFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQWpCbEI7O1dBRUc7UUFDYSxTQUFJLEdBQXNCLFNBQVMsQ0FBQztRQUVwRDs7V0FFRztRQUNhLGdCQUFXLEdBQTBCLFFBQVEsQ0FBQztRQVU1RCxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ1UsS0FBSyxDQUFDLElBQWEsRUFBRSxJQUFhOzs7OztZQUM3QyxPQUFPLE9BQU0sS0FBSyxZQUFDLElBQUksRUFBRSxJQUFJLGFBQUosSUFBSSxjQUFKLElBQUksR0FBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ3JELENBQUM7S0FBQTtJQUVEOztPQUVHO0lBQ1UsTUFBTTs7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDO1FBQzNGLENBQUM7S0FBQTtJQUVEOzs7O09BSUc7SUFDVSxTQUFTOzs7WUFDcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFBLE1BQUEsSUFBSSxDQUFDLGNBQWMsMENBQUUsR0FBRyxFQUFFLENBQUEsQ0FBQztZQUNoRCxPQUFPO2dCQUNMLE1BQU0sRUFBRSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsbUJBQW1CO2FBQ3BDLENBQUM7O0tBQ0g7Q0FDRjtBQXJERCxvREFxREMifQ==