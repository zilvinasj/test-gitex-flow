"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotfixGitFlowBranch = void 0;
const AvhGitFlowBranch_1 = require("./AvhGitFlowBranch");
/**
 * This class wraps the hotfix branch of the AVH implementation.
 */
class HotfixGitFlowBranch extends AvhGitFlowBranch_1.AvhGitFlowBranch {
    /**
     * Initializes a new instance of this class.
     *
     * @param repoPath - The path to the git repository.
     * @param configProvider - Git flow config provider.
     */
    constructor(repoPath, configProvider) {
        super(repoPath);
        /**
         * {@inheritdoc}
         */
        this.type = 'hotfix';
        /**
         * {@inheritdoc}
         */
        this.defaultBase = 'master';
        this.configProvider = configProvider;
    }
    /**
     * {@inheritdoc}
     *
     * @returns The configuration of the hotfix git flow branch.
     */
    getConfig() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const config = yield ((_a = this.configProvider) === null || _a === void 0 ? void 0 : _a.get());
            return {
                prefix: config === null || config === void 0 ? void 0 : config.hotfixBranchPrefix,
            };
        });
    }
}
exports.HotfixGitFlowBranch = HotfixGitFlowBranch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSG90Zml4R2l0Rmxvd0JyYW5jaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hdmgvYnJhbmNoZXMvSG90Zml4R2l0Rmxvd0JyYW5jaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFJQSx5REFBc0Q7QUFFdEQ7O0dBRUc7QUFDSCxNQUFhLG1CQUFvQixTQUFRLG1DQUFnQjtJQWF2RDs7Ozs7T0FLRztJQUNILFlBQVksUUFBaUIsRUFBRSxjQUE4QztRQUMzRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFqQmxCOztXQUVHO1FBQ2EsU0FBSSxHQUFzQixRQUFRLENBQUM7UUFFbkQ7O1dBRUc7UUFDYSxnQkFBVyxHQUEwQixRQUFRLENBQUM7UUFVNUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7O09BSUc7SUFDVSxTQUFTOzs7WUFDcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFBLE1BQUEsSUFBSSxDQUFDLGNBQWMsMENBQUUsR0FBRyxFQUFFLENBQUEsQ0FBQztZQUNoRCxPQUFPO2dCQUNMLE1BQU0sRUFBRSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsa0JBQWtCO2FBQ25DLENBQUM7O0tBQ0g7Q0FDRjtBQW5DRCxrREFtQ0MifQ==