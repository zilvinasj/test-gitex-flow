"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvhConfigProvider = void 0;
const log4js_1 = require("log4js");
const GitFlowBashExecuter_1 = require("./GitFlowBashExecuter");
/**
 * AVH Configuration provider.
 */
class AvhConfigProvider {
    /**
     * Initializes a new instance of this class.
     *
     * @param repoPath - The path to the git repository.
     */
    constructor(repoPath) {
        this.logger = log4js_1.getLogger('AvhConfigProvider');
        this.repositoryPath = repoPath;
    }
    /**
     * {@inheritdoc}
     *
     * @param config - Git flow config to be set.
     */
    set(config) {
        return __awaiter(this, void 0, void 0, function* () {
            if ((config === null || config === void 0 ? void 0 : config.masterBranch) != undefined)
                yield this.setConfig('master', config.masterBranch);
            if ((config === null || config === void 0 ? void 0 : config.developBranch) != undefined)
                yield this.setConfig('develop', config.developBranch);
            if ((config === null || config === void 0 ? void 0 : config.featureBranchPrefix) != undefined)
                yield this.setConfig('feature', config.featureBranchPrefix);
            if ((config === null || config === void 0 ? void 0 : config.bugfixBranchPrefix) != undefined)
                yield this.setConfig('bugfix', config.bugfixBranchPrefix);
            if ((config === null || config === void 0 ? void 0 : config.releaseBranchPrefix) != undefined)
                yield this.setConfig('release', config.releaseBranchPrefix);
            if ((config === null || config === void 0 ? void 0 : config.hotfixBranchPrefix) != undefined)
                yield this.setConfig('hotfix', config.hotfixBranchPrefix);
            if ((config === null || config === void 0 ? void 0 : config.supportBranchPrefix) != undefined)
                yield this.setConfig('support', config.supportBranchPrefix);
            if ((config === null || config === void 0 ? void 0 : config.versionTagPrefix) != undefined)
                yield this.setConfig('versiontagprefix', config.versionTagPrefix);
        });
    }
    /**
     * {@inheritdoc}
     *
     * @returns The git flow configuration.
     */
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield GitFlowBashExecuter_1.GitFlowBashExecuter.execute({
                action: 'config',
                repositoryPath: this.repositoryPath,
            });
            const lines = output.split('\n');
            return {
                masterBranch: this.extractConfig(lines[0]),
                developBranch: this.extractConfig(lines[1]),
                featureBranchPrefix: this.extractConfig(lines[2]),
                bugfixBranchPrefix: this.extractConfig(lines[3]),
                releaseBranchPrefix: this.extractConfig(lines[4]),
                hotfixBranchPrefix: this.extractConfig(lines[5]),
                supportBranchPrefix: this.extractConfig(lines[6]),
                versionTagPrefix: this.extractConfig(lines[7]),
            };
        });
    }
    extractConfig(line) {
        const index = line.indexOf(':') + 1;
        let option = line.substr(index).trim();
        if (!option)
            option = undefined;
        return option;
    }
    setConfig(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield GitFlowBashExecuter_1.GitFlowBashExecuter.execute({
                action: 'config',
                repositoryPath: this.repositoryPath,
                options: `set ${key} ${value}`,
            });
            this.logger.debug(output.trim());
        });
    }
}
exports.AvhConfigProvider = AvhConfigProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXZoQ29uZmlnUHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXZoL0F2aENvbmZpZ1Byb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLG1DQUEyQztBQUczQywrREFBNEQ7QUFFNUQ7O0dBRUc7QUFDSCxNQUFhLGlCQUFpQjtJQUs1Qjs7OztPQUlHO0lBQ0gsWUFBWSxRQUFpQjtRQVRyQixXQUFNLEdBQVcsa0JBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBVXRELElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7OztPQUlHO0lBQ1UsR0FBRyxDQUFDLE1BQXFCOztZQUNwQyxJQUFJLENBQUEsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFlBQVksS0FBSSxTQUFTO2dCQUFFLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzNGLElBQUksQ0FBQSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsYUFBYSxLQUFJLFNBQVM7Z0JBQUUsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDOUYsSUFBSSxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxtQkFBbUIsS0FBSSxTQUFTO2dCQUFFLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDMUcsSUFBSSxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxrQkFBa0IsS0FBSSxTQUFTO2dCQUFFLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDdkcsSUFBSSxDQUFBLE1BQU0sYUFB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