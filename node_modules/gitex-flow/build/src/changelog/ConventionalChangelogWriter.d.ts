/// <reference types="node" />
import { GitLog } from '../git';
import { Transform, Readable } from 'stream';
import { GitRepositoryContext } from '../git/GitRepositoryContext';
import { ChangelogWriter, ChangelogWriterOptions } from './ChangelogWriter';
/**
 * Options of the ConventionalChangelogBuilder.
 */
export interface ConventionalChangelogWriterOptions extends ChangelogWriterOptions {
    /**
     * Specifies the conventional commit format.
     * The selectable options are:
     * - angular (default)
     * - atom
     * - ember
     * - eslint
     * - jquery
     * - jshint
     *
     * For more infomation check out the documentation of the
     * [conventional-changelog-preset-loader](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-preset-loader).
     * This loader is used to load the corresponding present.
     */
    conventionalChangelogPresent?: string;
}
/**
 * Builder for a changelog from conventional commits.
 */
export declare class ConventionalChangelogWriter extends ChangelogWriter {
    private options;
    /**
     * Initializes a new instance of this class.
     *
     * @param options - The options of the instance.
     */
    constructor(options: ConventionalChangelogWriterOptions);
    /**
     * Builds a changelog stream from the commits since the last release.
     *
     * @param context - The context information of the git repository.
     * @param logs - The conventional git logs since the last release.
     *
     * @returns The stream of the latest changelog.
     */
    protected createLatestChangelogStream(context: GitRepositoryContext, logs: GitLog[]): Promise<Transform>;
    /**
     * Merges the changelog since the latest release with the main changelog.
     *
     * @param latestChangelogStream - The stream with the changelogs since the latest release.
     * @param changelogPath - The file path of the changelog to be merged.
     *
     * @returns The stream of the merged changelogs.
     */
    protected mergeWithChangelog(latestChangelogStream: Readable, changelogPath: string): Promise<Readable>;
    private cleanNotes;
}
