"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConventionalChangelogWriter = void 0;
const stream_1 = require("stream");
const ChangelogWriter_1 = require("./ChangelogWriter");
const conventional_changelog_preset_loader_1 = __importDefault(require("conventional-changelog-preset-loader"));
const conventional_changelog_writer_1 = __importDefault(require("conventional-changelog-writer"));
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const tools_1 = require("../tools");
/**
 * Builder for a changelog from conventional commits.
 */
class ConventionalChangelogWriter extends ChangelogWriter_1.ChangelogWriter {
    /**
     * Initializes a new instance of this class.
     *
     * @param options - The options of the instance.
     */
    constructor(options) {
        super(options);
        this.options = options;
    }
    /**
     * Builds a changelog stream from the commits since the last release.
     *
     * @param context - The context information of the git repository.
     * @param logs - The conventional git logs since the last release.
     *
     * @returns The stream of the latest changelog.
     */
    createLatestChangelogStream(context, logs) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const present = (_a = this.options.conventionalChangelogPresent) !== null && _a !== void 0 ? _a : 'angular';
            // Workaround for issue https://github.com/conventional-changelog/conventional-changelog/issues/815
            // Should be removed if bug will be fixed.
            logs = this.cleanNotes(logs);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const config = (yield conventional_changelog_preset_loader_1.default(present));
            const commitStream = stream_1.Readable.from(logs);
            return commitStream.pipe(conventional_changelog_writer_1.default(context, config.writerOpts));
        });
    }
    /**
     * Merges the changelog since the latest release with the main changelog.
     *
     * @param latestChangelogStream - The stream with the changelogs since the latest release.
     * @param changelogPath - The file path of the changelog to be merged.
     *
     * @returns The stream of the merged changelogs.
     */
    mergeWithChangelog(latestChangelogStream, changelogPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const dir = path_1.dirname(changelogPath);
            const fileName = path_1.basename(changelogPath, '.md');
            // Create tmp file with latest changelog.
            const tmpChangelogFilePath = path_1.join(dir, `${fileName}.tmp.md`);
            const tmpChangelogFileStream = fs_extra_1.createWriteStream(tmpChangelogFilePath);
            yield tools_1.Utils.pipe(latestChangelogStream, tmpChangelogFileStream);
            // Append content of changelog to tmp file.
            const changelogFileStream = fs_extra_1.createReadStream(changelogPath);
            const tmpChangelogFileAppendStream = fs_extra_1.createWriteStream(tmpChangelogFilePath, { flags: 'a' });
            yield tools_1.Utils.pipe(changelogFileStream, tmpChangelogFileAppendStream);
            // Return readable stream of the tmp file and add listener to delete file on closing the stream.
            return fs_extra_1.createReadStream(tmpChangelogFilePath).on('close', () => {
                fs_extra_1.removeSync(tmpChangelogFilePath);
            });
        });
    }
    cleanNotes(logs) {
        for (const log of logs) {
            log.notes = log.notes.filter((v) => ['BREAKING CHANGE', 'BREAKING CHANGES'].includes(v.title));
        }
        return logs;
    }
}
exports.ConventionalChangelogWriter = ConventionalChangelogWriter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udmVudGlvbmFsQ2hhbmdlbG9nV3JpdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NoYW5nZWxvZy9Db252ZW50aW9uYWxDaGFuZ2Vsb2dXcml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsbUNBQTZDO0FBRTdDLHVEQUE0RTtBQUM1RSxnSEFBcUY7QUFDckYsa0dBQXdFO0FBQ3hFLCtCQUErQztBQUMvQyx1Q0FBMkU7QUFDM0Usb0NBQWlDO0FBdUJqQzs7R0FFRztBQUNILE1BQWEsMkJBQTRCLFNBQVEsaUNBQWU7SUFHOUQ7Ozs7T0FJRztJQUNILFlBQVksT0FBMkM7UUFDckQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDYSwyQkFBMkIsQ0FBQyxPQUE2QixFQUFFLElBQWM7OztZQUN2RixNQUFNLE9BQU8sR0FBRyxNQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsNEJBQTRCLG1DQUFJLFNBQVMsQ0FBQztZQUV2RSxtR0FBbUc7WUFDbkcsMENBQTBDO1lBQzFDLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTdCLDhEQUE4RDtZQUM5RCxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQU0sOENBQWlDLENBQUMsT0FBTyxDQUFDLENBQVEsQ0FBQztZQUN6RSxNQUFNLFlBQVksR0FBRyxpQkFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsdUNBQTJCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDOztLQUNuRjtJQUVEOzs7Ozs7O09BT0c7SUFDYSxrQkFBa0IsQ0FBQyxxQkFBK0IsRUFBRSxhQUFxQjs7WUFDdkYsTUFBTSxHQUFHLEdBQUcsY0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sUUFBUSxHQUFHLGVBQVEsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFaEQseUNBQXlDO1lBQ3pDLE1BQU0sb0JBQW9CLEdBQUcsV0FBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsU0FBUyxDQUFDLENBQUM7WUFDN0QsTUFBTSxzQkFBc0IsR0FBRyw0QkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sYUFBSyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBRWhFLDJDQUEyQztZQUMzQyxNQUFNLG1CQUFtQixHQUFHLDJCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzVELE1BQU0sNEJBQTRCLEdBQUcsNEJBQWlCLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUM3RixNQUFNLGFBQUssQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztZQUVwRSxnR0FBZ0c7WUFDaEcsT0FBTywyQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUM3RCxxQkFBVSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7SUFFTyxVQUFVLENBQUMsSUFBYztRQUMvQixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtZQUN0QixHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLGtCQUFrQixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ2hHO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFwRUQsa0VBb0VDIn0=