"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangelogWriter = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const log4js_1 = require("log4js");
const Utils_1 = require("../tools/Utils");
/**
 * Builder for a changelog.
 */
class ChangelogWriter {
    /**
     * Initializes a new instance of this class.
     *
     * @param options - The options of the instance.
     */
    constructor(options) {
        this.logger = log4js_1.getLogger('ChangelogWriter');
        this.opt = options;
    }
    /**
     * Writes a changelog.
     *
     * @param context - The context information of the git repository.
     * @param logs - The conventional git logs since the last release.
     */
    write(context, logs) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const changelogFileName = (_a = this.opt.changelogFileName) !== null && _a !== void 0 ? _a : ChangelogWriter.DefaultChangelogFile;
            const basePath = (_b = this.opt.basePath) !== null && _b !== void 0 ? _b : process.cwd();
            const changelogPath = path_1.join(basePath, changelogFileName);
            yield fs_extra_1.ensureFile(changelogPath);
            let latestChangelogStream = yield this.createLatestChangelogStream(context, logs);
            const latestChangelogFileName = ChangelogWriter.getLatestChangelogName(changelogFileName);
            const latestChangelogFilePath = path_1.join(basePath, latestChangelogFileName);
            const latestChangelogFileStream = fs_extra_1.createWriteStream(latestChangelogFilePath);
            yield Utils_1.Utils.pipe(latestChangelogStream, latestChangelogFileStream);
            latestChangelogStream = fs_extra_1.createReadStream(latestChangelogFilePath);
            const changelogStream = yield this.mergeWithChangelog(latestChangelogStream, changelogPath, context);
            let changelogUpdatedMessage = `Updated ${changelogFileName}`;
            if (this.opt.storeLatestChangelog) {
                changelogUpdatedMessage += ` and ${latestChangelogFileName}`;
            }
            else {
                yield fs_extra_1.remove(latestChangelogFilePath);
            }
            const changelogFileStream = fs_extra_1.createWriteStream(changelogPath);
            yield Utils_1.Utils.pipe(changelogStream, changelogFileStream);
            this.logger.info(changelogUpdatedMessage);
        });
    }
    /**
     * Derives the name of the seperated latest changelog from the main changelog name.
     *
     * @param changelogFileName - The name of the main changelog.
     *
     * @returns The derived name for the latest changelog.
     */
    static getLatestChangelogName(changelogFileName) {
        const ext = path_1.extname(changelogFileName);
        const baseFileName = path_1.basename(changelogFileName, ext);
        return `${baseFileName}.latest${ext}`;
    }
}
exports.ChangelogWriter = ChangelogWriter;
ChangelogWriter.DefaultChangelogFile = 'CHANGELOG.md';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlbG9nV3JpdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NoYW5nZWxvZy9DaGFuZ2Vsb2dXcml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBR0EsK0JBQStDO0FBQy9DLHVDQUFtRjtBQUNuRixtQ0FBbUM7QUFDbkMsMENBQXVDO0FBeUJ2Qzs7R0FFRztBQUNILE1BQXNCLGVBQWU7SUFNbkM7Ozs7T0FJRztJQUNILFlBQVksT0FBK0I7UUFSMUIsV0FBTSxHQUFHLGtCQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQVNyRCxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDVSxLQUFLLENBQUMsT0FBNkIsRUFBRSxJQUFjOzs7WUFDOUQsTUFBTSxpQkFBaUIsR0FBRyxNQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLG1DQUFJLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQztZQUM3RixNQUFNLFFBQVEsR0FBRyxNQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxtQ0FBSSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDcEQsTUFBTSxhQUFhLEdBQUcsV0FBSSxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3hELE1BQU0scUJBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUVoQyxJQUFJLHFCQUFxQixHQUFHLE1BQU0sSUFBSSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVsRixNQUFNLHVCQUF1QixHQUFHLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQzFGLE1BQU0sdUJBQXVCLEdBQUcsV0FBSSxDQUFDLFFBQVEsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3hFLE1BQU0seUJBQXlCLEdBQUcsNEJBQWlCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUM3RSxNQUFNLGFBQUssQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUseUJBQXlCLENBQUMsQ0FBQztZQUVuRSxxQkFBcUIsR0FBRywyQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sZUFBZSxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUVyRyxJQUFJLHVCQUF1QixHQUFHLFdBQVcsaUJBQWlCLEVBQUUsQ0FBQztZQUM3RCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUU7Z0JBQ2pDLHVCQUF1QixJQUFJLFFBQVEsdUJBQXVCLEVBQUUsQ0FBQzthQUM5RDtpQkFBTTtnQkFDTCxNQUFNLGlCQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQzthQUN2QztZQUVELE1BQU0sbUJBQW1CLEdBQUcsNEJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDN0QsTUFBTSxhQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1lBRXZELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7O0tBQzNDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLHNCQUFzQixDQUFDLGlCQUF5QjtRQUM1RCxNQUFNLEdBQUcsR0FBRyxjQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN2QyxNQUFNLFlBQVksR0FBRyxlQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEQsT0FBTyxHQUFHLFlBQVksVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN4QyxDQUFDOztBQTdESCwwQ0FtRkM7QUFsRndCLG9DQUFvQixHQUFHLGNBQWMsQ0FBQyJ9