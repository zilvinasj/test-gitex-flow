"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeepAChangelogWriter = void 0;
const stream_1 = require("stream");
const ChangelogWriter_1 = require("./ChangelogWriter");
const fs_extra_1 = require("fs-extra");
const url_1 = require("url");
const keep_a_changelog_1 = require("keep-a-changelog");
/**
 * Builder for a changelog from conventional commits in [keep-a-changelog format](https://keepachangelog.com/en/1.0.0/).
 */
class KeepAChangelogWriter extends ChangelogWriter_1.ChangelogWriter {
    /**
     * Initializes a new instance of this class.
     *
     * @param options - The options of the instance.
     */
    constructor(options) {
        super(options);
        this.options = options;
    }
    /**
     * Builds a changelog stream from the commits since the last release.
     *
     * @param context - The context information of the git repository.
     * @param logs - The conventional git logs since the last release.
     *
     * @returns The stream of the latest changelog.
     */
    createLatestChangelogStream(context, logs) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const latestReleaseChangelog = new keep_a_changelog_1.Changelog((_a = this.options.title) !== null && _a !== void 0 ? _a : 'Changelog of latest version', (_b = this.options.description) !== null && _b !== void 0 ? _b : `Changes of version ${context.version}`);
            const latestRelease = new keep_a_changelog_1.Release((_c = context.version) !== null && _c !== void 0 ? _c : '', (_d = context.date) !== null && _d !== void 0 ? _d : new Date());
            latestReleaseChangelog.addRelease(latestRelease);
            for (const log of logs) {
                const changeType = this.getTypeFromLog(log);
                if (log.subject) {
                    const referencedIssues = (_e = log.references) === null || _e === void 0 ? void 0 : _e.map((x) => `#${x.issue}`).join(', ');
                    const message = log.subject + (referencedIssues ? ` ( ${referencedIssues} )` : '');
                    latestRelease.addChange(changeType, new keep_a_changelog_1.Change(message));
                }
            }
            return stream_1.Readable.from(latestReleaseChangelog.toString());
        });
    }
    getTypeFromLog(log) {
        let changeType = 'changed';
        if (log.notes.some((x) => x.title === 'REMOVED')) {
            changeType = 'removed';
        }
        else if (log.notes.some((x) => x.title === 'SECURITY')) {
            changeType = 'security';
        }
        else if (log.type === 'feat') {
            changeType = 'added';
        }
        else if (log.type === 'fix') {
            changeType = 'fixed';
        }
        else if (log.notes.some((x) => x.title === 'DEPRECATED')) {
            changeType = 'deprecated';
        }
        return changeType;
    }
    /**
     * Merges the changelog since the latest release with the main changelog.
     *
     * @param latestChangelogStream - The stream with the changelogs since the latest release.
     * @param changelogPath - The file path of the changelog to be merged.
     * @param context - The context information of the git repository.
     *
     * @returns The stream of the merged changelog.
     */
    mergeWithChangelog(latestChangelogStream, changelogPath, context) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const changelogText = yield fs_extra_1.readFile(changelogPath, 'utf8');
            let changelog = new keep_a_changelog_1.Changelog((_a = this.options.title) !== null && _a !== void 0 ? _a : 'Changelog', this.options.description);
            if (changelogText) {
                changelog = keep_a_changelog_1.parser(changelogText);
            }
            if (context === null || context === void 0 ? void 0 : context.repoUrl) {
                changelog.url = this.rewriteUrl(context.repoUrl);
            }
            let latestChangelog;
            latestChangelogStream.on('data', (changelogBuffer) => {
                latestChangelog = keep_a_changelog_1.parser(changelogBuffer.toString());
            });
            return new Promise((resolve, reject) => {
                latestChangelogStream.on('error', (error) => reject(error));
                latestChangelogStream.on('end', () => {
                    changelog.addRelease(latestChangelog.releases[0]);
                    resolve(stream_1.Readable.from(changelog.toString()));
                });
            });
        });
    }
    rewriteUrl(url) {
        const parsed = url_1.parse(url.replace('git@', `https://`));
        if (parsed.pathname) {
            parsed.pathname = parsed.pathname.replace(/\.git$/, '').replace(/^\/:/, '/');
        }
        return url_1.format(parsed);
    }
}
exports.KeepAChangelogWriter = KeepAChangelogWriter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2VlcEFDaGFuZ2Vsb2dXcml0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2hhbmdlbG9nL0tlZXBBQ2hhbmdlbG9nV3JpdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUNBLG1DQUFrQztBQUVsQyx1REFBNEU7QUFDNUUsdUNBQW9DO0FBQ3BDLDZCQUFvQztBQUNwQyx1REFBa0Y7QUFrQmxGOztHQUVHO0FBQ0gsTUFBYSxvQkFBcUIsU0FBUSxpQ0FBZTtJQUd2RDs7OztPQUlHO0lBQ0gsWUFBWSxPQUFvQztRQUM5QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNhLDJCQUEyQixDQUFDLE9BQTZCLEVBQUUsSUFBYzs7O1lBQ3ZGLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSw0QkFBUyxDQUMxQyxNQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxtQ0FBSSw2QkFBNkIsRUFDbkQsTUFBQSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsbUNBQUksc0JBQXNCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FDcEUsQ0FBQztZQUNGLE1BQU0sYUFBYSxHQUFHLElBQUksMEJBQU8sQ0FBQyxNQUFBLE9BQU8sQ0FBQyxPQUFPLG1DQUFJLEVBQUUsRUFBRSxNQUFBLE9BQU8sQ0FBQyxJQUFJLG1DQUFJLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNyRixzQkFBc0IsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFakQsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7Z0JBQ3RCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzVDLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRTtvQkFDZixNQUFNLGdCQUFnQixHQUFHLE1B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