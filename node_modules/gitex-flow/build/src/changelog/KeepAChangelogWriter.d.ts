/// <reference types="node" />
import { GitLog } from '../git';
import { Readable } from 'stream';
import { GitRepositoryContext } from '../git/GitRepositoryContext';
import { ChangelogWriter, ChangelogWriterOptions } from './ChangelogWriter';
/**
 * Options of the KeepAChangelogWriter.
 */
export interface KeepAChangelogWriterOptions extends ChangelogWriterOptions {
    /**
     * The title of the changelog.
     * *DEFAULT*: 'Changelog'
     */
    title?: string;
    /**
     * The description of the changelog.
     */
    description?: string;
}
/**
 * Builder for a changelog from conventional commits in [keep-a-changelog format](https://keepachangelog.com/en/1.0.0/).
 */
export declare class KeepAChangelogWriter extends ChangelogWriter {
    private options;
    /**
     * Initializes a new instance of this class.
     *
     * @param options - The options of the instance.
     */
    constructor(options: KeepAChangelogWriterOptions);
    /**
     * Builds a changelog stream from the commits since the last release.
     *
     * @param context - The context information of the git repository.
     * @param logs - The conventional git logs since the last release.
     *
     * @returns The stream of the latest changelog.
     */
    protected createLatestChangelogStream(context: GitRepositoryContext, logs: GitLog[]): Promise<Readable>;
    private getTypeFromLog;
    /**
     * Merges the changelog since the latest release with the main changelog.
     *
     * @param latestChangelogStream - The stream with the changelogs since the latest release.
     * @param changelogPath - The file path of the changelog to be merged.
     * @param context - The context information of the git repository.
     *
     * @returns The stream of the merged changelog.
     */
    protected mergeWithChangelog(latestChangelogStream: Readable, changelogPath: string, context?: GitRepositoryContext): Promise<Readable>;
    private rewriteUrl;
}
