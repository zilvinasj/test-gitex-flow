import { StatusResult } from 'simple-git';
import { GitLog } from './GitLog';
import { ProjectConfig } from '../configs';
/**
 * A simple API with basic functionality of a git repository.
 */
export declare class GitRepository {
    protected config?: ProjectConfig;
    /**
     * Initializes a new instance of this class.
     *
     * @param config - The project configuration.
     */
    constructor(config?: ProjectConfig);
    /**
     * Gets the folder path of the git repository.
     *
     * @returns The path to the git repository.
     */
    getRepoPath(): string;
    /**
     * Gets the path of the git repository.
     */
    remove(): Promise<void>;
    /**
     * Ensures the repository exists.
     * If it doesn't exist it will be created.
     */
    ensure(): Promise<void>;
    /**
     * Checks out a given branch.
     *
     * @param branchName - Name of the branch to be checked out.
     */
    checkout(branchName: string): Promise<void>;
    /**
     * Retrieves the current status of the git repository.
     *
     * @returns The status of the git repository.
     */
    status(): Promise<StatusResult>;
    /**
     * Adds and commits the given file names to the current branch.
     *
     * @param fileNames - Relative file paths to be added before commit.
     * @param message - Commit message.
     * @param authorName - The name of the author.
     * @param authorMail - Mail address of the author.
     *
     * @returns The hash of the commit.
     */
    commit(fileNames: string[], message: string, authorName?: string, authorMail?: string): Promise<string>;
    /**
     * Stashes the uncommited changes from the current branch.
     *
     * @returns The message of the stashing.
     */
    stash(): Promise<string>;
    /**
     * Pops stash with a given name.
     */
    popLatestStash(): Promise<void>;
    /**
     * Ensures there are no uncommited changes (staged and unstaged) in the local workspace.
     */
    ensureNoUnCommitedChanges(): Promise<void>;
    /**
     * Returns the most recent released version tag (semantic version).
     *
     * @returns The version of the latest release.
     */
    getLatestReleasedVersion(): Promise<string | undefined>;
    /**
     * Collects all commit messages since the last release.
     *
     * @returns The logs since the last release.
     */
    getLogsSinceLastRelease(): Promise<GitLog[]>;
    private getDiffLogs;
    private createOrOpenRepo;
}
