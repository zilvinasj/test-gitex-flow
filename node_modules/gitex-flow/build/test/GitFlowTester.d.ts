import { GitFlow } from '../src/api/GitFlow';
import { TestGitRepository } from './TestGitRepository';
import { GitFlowConfig } from '../src/configs/GitFlowConfig';
import { GitFlowBranchType, GitFlowBranch, GitFlowBaseBranchType } from '../src/api/branches/GitFlowBranch';
import { GitFlowBranchConfig } from '../src/api/GitFlowBranchConfig';
/**
 * Tester for some standard git flow tests.
 */
export declare class GitFlowTester {
    private static readonly CachedGitFlowRepo;
    private readonly gitFlow;
    private readonly repo;
    /**
     * Initializes a new instance of this class.
     *
     * @param gitFlow - Git flow implementation to be tested.
     * @param testRepoPath - Path the test repo is saved to.
     */
    constructor(gitFlow: GitFlow, testRepoPath: string);
    /**
     * Init the git flow tester.
     */
    init(): Promise<void>;
    /**
     * Disposes the git flow tester.
     */
    dispose(): Promise<void>;
    /**
     * Clears the cache.
     */
    static clearCache(): Promise<void>;
    /**
     * Asserts the version.
     */
    assertVersion(): Promise<void>;
    /**
     * Asserts the initialization of the test git flow.
     *
     * @param config - The git flow configuration.
     * @param force - Flag to force the initialization.
     */
    assertInit(config?: GitFlowConfig, force?: boolean): Promise<void>;
    /**
     * Checks out the development branch.
     */
    checkoutDevelopBranch(): Promise<void>;
    /**
     * Checks out a branch.
     *
     * @param branchName - The branch name to be checked out.
     */
    checkoutBranch(branchName: string): Promise<void>;
    /**
     * Select the given git flow branch.
     *
     * @param type - The git flow branch type to be selected.
     *
     * @returns The selected git flow branch.
     */
    selectBranch(type: GitFlowBranchType): TestBranch;
    private static ensureGitFlowRepo;
}
/**
 * A GitFlowBranch with some extended functionality for easier unit tests.
 */
export declare class TestBranch implements GitFlowBranch {
    private branch;
    private repo;
    private branchName?;
    type: GitFlowBranchType;
    defaultBase: GitFlowBaseBranchType;
    /**
     * Initializes a new instance of this class.
     *
     * @param branch - Branch to be wrapped.
     * @param repo - The test repo.
     */
    constructor(branch: GitFlowBranch, repo: TestGitRepository);
    /**
     * Gets the test git flow branch configuration.
     *
     * @returns The git flow branch configuration.
     */
    getConfig(): Promise<GitFlowBranchConfig>;
    /**
     * Retrieves all test  branches from the current type.
     *
     * @returns All open branches from the current type.
     */
    list(): Promise<string[]>;
    /**
     * Starts the current test git flow branch.
     *
     * @param name - The name of the git flow branch.
     * @param base - The base of the git flow branch.
     *
     * @returns The name with its prefix.
     */
    start(name?: string | undefined, base?: string | undefined): Promise<string>;
    /**
     * Finishes the current test git flow branch.
     *
     * @param name - The name of the git flow branch.
     * @param msg - The message to finish the test git flow branch.
     */
    finish(name?: string | undefined, msg?: string | undefined): Promise<void>;
    /**
     * Generates the test git flow branch name.
     *
     * @param name - The name of the test git flow branch.
     *
     * @returns The test git flow branch name.
     */
    generateBranchName(name?: string): Promise<string | undefined>;
    /**
     * Commits a given file to the test repository.
     *
     * @param fileName - The file name to be commited.
     * @param msg - The commit message.
     */
    commit(fileName: string, msg: string): Promise<void>;
}
