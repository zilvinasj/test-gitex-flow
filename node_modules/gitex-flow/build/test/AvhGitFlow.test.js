"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const AvhGitFlow_1 = require("../src/avh/AvhGitFlow");
const GitFlowTester_1 = require("./GitFlowTester");
const chai_1 = require("chai");
const AvhBranchListParser_1 = require("../src/avh/AvhBranchListParser");
const testRepoPath = path_1.resolve(path_1.join('.', 'test_repo'));
describe('Test AVH git flow implementation', function () {
    this.timeout(0);
    this.afterAll(() => __awaiter(this, void 0, void 0, function* () {
        yield GitFlowTester_1.GitFlowTester.clearCache();
    }));
    it('git flow version', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.assertVersion();
            yield tester.dispose();
        });
    });
    it('git flow init with defaults', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.assertInit();
            yield tester.dispose();
        });
    });
    it('git flow init with custom settings', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.assertInit({
                featureBranchPrefix: 'feat/',
                bugfixBranchPrefix: 'fix/',
                supportBranchPrefix: 'supp/',
                versionTagPrefix: 'v',
            });
            yield tester.dispose();
        });
    });
    it('git flow re-init', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.assertInit();
            yield tester.assertInit({
                featureBranchPrefix: 'feat/',
                bugfixBranchPrefix: 'fix/',
                supportBranchPrefix: 'supp/',
                versionTagPrefix: 'v',
            }, true);
            yield tester.dispose();
        });
    });
    it('git flow feature "#1"', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const branch = tester.selectBranch('feature');
            const branchName = yield branch.start('#1');
            chai_1.assert.equal(branchName, 'feature/#1');
            chai_1.assert.deepStrictEqual(yield branch.list(), ['#1']);
            yield branch.commit('feature.txt', 'feat(scope): Added feature.txt');
            yield branch.finish();
            yield tester.dispose();
        });
    });
    it('git flow bugfix "#2', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const branch = tester.selectBranch('bugfix');
            const branchName = yield branch.start('#2');
            chai_1.assert.equal(branchName, 'bugfix/#2');
            chai_1.assert.deepStrictEqual(yield branch.list(), ['#2']);
            yield branch.commit('bugfix.txt', 'fix(scope): Added bugfix.txt');
            yield branch.finish();
            chai_1.assert.deepStrictEqual(yield branch.list(), []);
            yield tester.dispose();
        });
    });
    it('git flow release "1.0.0"', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const branch = tester.selectBranch('release');
            const branchName = yield branch.start('1.0.0');
            chai_1.assert.equal(branchName, 'release/1.0.0');
            chai_1.assert.deepStrictEqual(yield branch.list(), ['1.0.0']);
            yield branch.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield branch.finish('1.0.0', '1.0.0');
            chai_1.assert.deepStrictEqual(yield branch.list(), []);
            yield tester.dispose();
        });
    });
    it('git flow hotfix "1.0.1"', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const branch = tester.selectBranch('hotfix');
            const branchName = yield branch.start('1.0.1');
            chai_1.assert.equal(branchName, 'hotfix/1.0.1');
            chai_1.assert.deepStrictEqual(yield branch.list(), ['1.0.1']);
            yield branch.commit('hotfix_bugfix.txt', 'fix(scope): Added hotfix_bugfix.txt');
            yield branch.finish('1.0.1', '1.0.1');
            chai_1.assert.deepStrictEqual(yield branch.list(), []);
            yield tester.dispose();
        });
    });
    it('git flow support "1.0.0-lts"', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const branch = tester.selectBranch('support');
            const branchName = yield branch.start('1.0.0-lts', 'master');
            chai_1.assert.equal(branchName, 'support/1.0.0-lts');
            chai_1.assert.deepStrictEqual(yield branch.list(), ['1.0.0-lts']);
            yield branch.commit('support_feature.txt', 'feat(scope): Added support_feature.txt');
            yield tester.dispose();
        });
    });
    it('git flow integration run', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const feature1 = tester.selectBranch('feature');
            yield feature1.start('#1');
            yield feature1.commit('feature.txt', 'feat(scope): Added feature.txt');
            const bugfix1 = tester.selectBranch('bugfix');
            yield bugfix1.start('#2');
            yield bugfix1.commit('bugfix.txt', 'fix(scope): Added bugfix.txt');
            const feature2 = tester.selectBranch('feature');
            yield feature2.start('#3');
            yield feature2.commit('feature_2.txt', 'feat(scope): Added feature_2.txt');
            chai_1.assert.deepStrictEqual(yield feature1.list(), ['#1', '#3']);
            chai_1.assert.deepStrictEqual(yield feature2.list(), ['#1', '#3']);
            chai_1.assert.deepStrictEqual(yield bugfix1.list(), ['#2']);
            yield feature1.finish('#1');
            yield feature2.finish('#3');
            yield bugfix1.finish('#2');
            chai_1.assert.deepStrictEqual(yield feature1.list(), []);
            chai_1.assert.deepStrictEqual(yield feature2.list(), []);
            chai_1.assert.deepStrictEqual(yield bugfix1.list(), []);
            const release = tester.selectBranch('release');
            const branchName = yield release.start('1.0.0');
            chai_1.assert.equal(branchName, 'release/1.0.0');
            yield release.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield release.finish('1.0.0', '1.0.0');
            const support = tester.selectBranch('support');
            yield support.start('1.0.0-lts', 'master');
            yield support.commit('support_feature.txt', 'feat(scope): Added support_feature.txt');
            yield tester.dispose();
        });
    });
    it('Validate AVH branch list parser', function () {
        return __awaiter(this, void 0, void 0, function* () {
            let result = yield AvhBranchListParser_1.AvhBranchListParser.parse('  1.0.0');
            chai_1.assert.deepStrictEqual(result, ['1.0.0']);
            result = yield AvhBranchListParser_1.AvhBranchListParser.parse('* 1.0.0\n  1.0.1');
            chai_1.assert.deepStrictEqual(result, ['1.0.0', '1.0.1']);
            result = yield AvhBranchListParser_1.AvhBranchListParser.parse('  1.0.0\n* 1.0.1');
            chai_1.assert.deepStrictEqual(result, ['1.0.0', '1.0.1']);
            result = yield AvhBranchListParser_1.AvhBranchListParser.parse('  #1\n* #2');
            chai_1.assert.deepStrictEqual(result, ['#1', '#2']);
        });
    });
});
function createGitFlow() {
    return new AvhGitFlow_1.AvhGitFlow(testRepoPath);
}
//# sourceMappingURL=data:application/json;base64,