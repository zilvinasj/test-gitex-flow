"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const AvhGitFlow_1 = require("../src/avh/AvhGitFlow");
const GitFlowTester_1 = require("./GitFlowTester");
const GFlow_1 = require("../src/gflow/GFlow");
const chai_1 = require("chai");
const fs_extra_1 = require("fs-extra");
const testRepoPath = path_1.resolve(path_1.join('.', 'test_repo'));
describe('Test gFlow implementation', function () {
    this.timeout(0);
    this.afterAll(() => __awaiter(this, void 0, void 0, function* () {
        yield GitFlowTester_1.GitFlowTester.clearCache();
    }));
    it('git flow version', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.assertVersion();
            yield tester.dispose();
        });
    });
    it('git flow init with defaults', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.assertInit();
            yield tester.dispose();
        });
    });
    it('git flow init with custom settings', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.assertInit({
                featureBranchPrefix: 'feat/',
                bugfixBranchPrefix: 'fix/',
                supportBranchPrefix: 'supp/',
                versionTagPrefix: 'v',
            });
            yield tester.dispose();
        });
    });
    it('git flow re-init', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.assertInit();
            yield tester.assertInit({
                featureBranchPrefix: 'feat/',
                bugfixBranchPrefix: 'fix/',
                supportBranchPrefix: 'supp/',
                versionTagPrefix: 'v',
            }, true);
            yield tester.dispose();
        });
    });
    it('git flow feature "#1"', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const branch = tester.selectBranch('feature');
            const branchName = yield branch.start('#1');
            chai_1.assert.equal(branchName, 'feature/#1');
            chai_1.assert.deepStrictEqual(yield branch.list(), ['#1']);
            yield branch.commit('feature.txt', 'feat(scope): Added feature.txt');
            yield branch.finish();
            chai_1.assert.deepStrictEqual(yield branch.list(), []);
            yield tester.dispose();
        });
    });
    it('git flow bugfix "#2', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const branch = tester.selectBranch('bugfix');
            const branchName = yield branch.start('#2');
            chai_1.assert.equal(branchName, 'bugfix/#2');
            chai_1.assert.deepStrictEqual(yield branch.list(), ['#2']);
            yield branch.commit('bugfix.txt', 'fix(scope): Added bugfix.txt');
            yield branch.finish();
            chai_1.assert.deepStrictEqual(yield branch.list(), []);
            yield tester.dispose();
        });
    });
    it('git flow release "1.0.0" (auto-version)', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const branch = tester.selectBranch('release');
            const branchName = yield branch.start();
            chai_1.assert.equal(branchName, 'release/1.0.0');
            chai_1.assert.deepStrictEqual(yield branch.list(), ['1.0.0']);
            yield branch.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield branch.finish();
            chai_1.assert.deepStrictEqual(yield branch.list(), []);
            yield tester.dispose();
        });
    });
    it('git flow release "1.0.0" to "1.1.0" (auto-version)', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const release100 = tester.selectBranch('release');
            let branchName = yield release100.start();
            chai_1.assert.equal(branchName, 'release/1.0.0');
            chai_1.assert.deepStrictEqual(yield release100.list(), ['1.0.0']);
            yield release100.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            const feature1 = tester.selectBranch('feature');
            branchName = yield feature1.start('#1');
            chai_1.assert.equal(branchName, 'feature/#1');
            chai_1.assert.deepStrictEqual(yield feature1.list(), ['#1']);
            yield feature1.commit('feature_2.txt', 'feat(scope): Added feature_2.txt');
            yield feature1.finish();
            chai_1.assert.deepStrictEqual(yield feature1.list(), []);
            yield release100.finish();
            chai_1.assert.deepStrictEqual(yield release100.list(), []);
            const feature2 = tester.selectBranch('feature');
            branchName = yield feature2.start('#2');
            chai_1.assert.equal(branchName, 'feature/#2');
            chai_1.assert.deepStrictEqual(yield feature2.list(), ['#2']);
            yield feature2.commit('feature_3.txt', 'feat(scope): Added feature_3.txt');
            yield feature2.finish();
            chai_1.assert.deepStrictEqual(yield feature2.list(), []);
            const release110 = tester.selectBranch('release');
            branchName = yield release110.start();
            chai_1.assert.equal(branchName, 'release/1.1.0');
            chai_1.assert.deepStrictEqual(yield release110.list(), ['1.1.0']);
            yield release110.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield release110.finish();
            chai_1.assert.deepStrictEqual(yield release110.list(), []);
            yield tester.dispose();
        });
    });
    it('git flow release "1.0.0" to "2.0.0" (auto-version, Breacking Change)', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const release100 = tester.selectBranch('release');
            let branchName = yield release100.start();
            chai_1.assert.equal(branchName, 'release/1.0.0');
            yield release100.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            const feature1 = tester.selectBranch('feature');
            branchName = yield feature1.start('#1');
            chai_1.assert.equal(branchName, 'feature/#1');
            yield feature1.commit('feature_2.txt', 'feat(scope): Added feature_2.txt\n\nBREAKING CHANGE: API changes\n\ncloses #42');
            yield feature1.finish();
            yield release100.finish();
            const feature2 = tester.selectBranch('feature');
            branchName = yield feature2.start('#2');
            chai_1.assert.equal(branchName, 'feature/#2');
            yield feature2.commit('feature_3.txt', 'feat(scope): Added feature_3.txt');
            yield feature2.finish();
            const release200 = tester.selectBranch('release');
            branchName = yield release200.start();
            chai_1.assert.equal(branchName, 'release/2.0.0');
            yield release200.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield assertChangelog('release_changelog.md');
            yield release200.finish();
            yield tester.dispose();
        });
    });
    it('git flow hotfix "1.0.1" (auto-version)', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const release = tester.selectBranch('release');
            let branchName = yield release.start();
            chai_1.assert.equal(branchName, 'release/1.0.0');
            yield release.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield release.finish();
            const hotfix = tester.selectBranch('hotfix');
            branchName = yield hotfix.start();
            chai_1.assert.equal(branchName, 'hotfix/1.0.1');
            yield hotfix.commit('hotfix_bugfix.txt', 'fix(scope): Added hotfix_bugfix.txt');
            yield hotfix.finish();
            yield tester.dispose();
        });
    });
    it('git flow hotfix "1.0.1" to "1.0.2" (auto-version)', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const release = tester.selectBranch('release');
            let branchName = yield release.start();
            chai_1.assert.equal(branchName, 'release/1.0.0');
            yield release.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield release.finish();
            const hotfix1 = tester.selectBranch('hotfix');
            branchName = yield hotfix1.start();
            chai_1.assert.equal(branchName, 'hotfix/1.0.1');
            yield hotfix1.commit('hotfix_bugfix.txt', 'fix(scope): Added hotfix_bugfix.txt');
            yield hotfix1.finish();
            const hotfix2 = tester.selectBranch('hotfix');
            branchName = yield hotfix2.start();
            chai_1.assert.equal(branchName, 'hotfix/1.0.2');
            yield hotfix2.commit('hotfix_bugfix_2.txt', 'fix(scope): Added hotfix_bugfix_2.txt');
            yield hotfix2.finish();
            yield assertChangelog('hotfix_changelog.md');
            yield tester.dispose();
        });
    });
    it('git flow support "1.0.0-lts"', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const branch = tester.selectBranch('support');
            const branchName = yield branch.start('1.0.0-lts', 'master');
            chai_1.assert.equal(branchName, 'support/1.0.0-lts');
            chai_1.assert.deepStrictEqual(yield branch.list(), ['1.0.0-lts']);
            yield branch.commit('support_feature.txt', 'feat(scope): Added support_feature.txt');
            yield tester.dispose();
        });
    });
    it('git flow integration run', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const feature1 = tester.selectBranch('feature');
            yield feature1.start('#1');
            yield feature1.commit('feature.txt', 'feat(scope): Added feature.txt');
            const bugfix1 = tester.selectBranch('bugfix');
            yield bugfix1.start('#2');
            yield bugfix1.commit('bugfix.txt', 'fix(scope): Added bugfix.txt');
            const feature2 = tester.selectBranch('feature');
            yield feature2.start('#3');
            yield feature2.commit('feature_2.txt', 'feat(scope): Added feature_2.txt');
            chai_1.assert.deepStrictEqual(yield feature1.list(), ['#1', '#3']);
            chai_1.assert.deepStrictEqual(yield feature2.list(), ['#1', '#3']);
            chai_1.assert.deepStrictEqual(yield bugfix1.list(), ['#2']);
            yield feature1.finish('#1');
            yield feature2.finish('#3');
            yield bugfix1.finish('#2');
            const release = tester.selectBranch('release');
            const branchName = yield release.start('1.0.0');
            chai_1.assert.equal(branchName, 'release/1.0.0');
            yield release.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield release.finish();
            const support = tester.selectBranch('support');
            yield support.start('1.0.0-lts', 'master');
            yield support.commit('support_feature.txt', 'feat(scope): Added support_feature.txt');
            yield tester.dispose();
        });
    });
    it('[bugfix #23] git flow hotfix "1.0.1" (auto-version, from other branch)', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const release = tester.selectBranch('release');
            let branchName = yield release.start();
            chai_1.assert.equal(branchName, 'release/1.0.0');
            yield release.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield release.finish();
            const hotfix1 = tester.selectBranch('hotfix');
            branchName = yield hotfix1.start();
            chai_1.assert.equal(branchName, 'hotfix/1.0.1');
            yield hotfix1.commit('hotfix_bugfix.txt', 'fix(scope): Added hotfix_bugfix.txt');
            yield tester.checkoutDevelopBranch();
            yield hotfix1.finish();
            const hotfix2 = tester.selectBranch('hotfix');
            branchName = yield hotfix2.start();
            chai_1.assert.equal(branchName, 'hotfix/1.0.2');
            yield hotfix2.commit('hotfix_bugfix.txt', 'fix(scope): Added hotfix_bugfix.txt');
            yield tester.checkoutDevelopBranch();
            yield hotfix2.finish();
            yield tester.dispose();
        });
    });
    it('[bugfix #27] git flow release "1.0.0" (auto-version, rewritten package.json)', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const release1Branch = tester.selectBranch('release');
            const release1BranchName = yield release1Branch.start();
            chai_1.assert.equal(release1BranchName, 'release/1.0.0');
            yield release1Branch.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield release1Branch.finish();
            yield assertPackageJson('package.json');
            const release2Branch = tester.selectBranch('release');
            const release2BranchName = yield release2Branch.start();
            chai_1.assert.equal(release2BranchName, 'release/1.1.0');
            yield release2Branch.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield release2Branch.finish();
            yield assertPackageJson('package_1_1_0.json');
            yield tester.dispose();
        });
    });
    it('[bugfix #28] git flow release "1.0.0" (auto-version, from other branch)', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(), testRepoPath);
            yield tester.init();
            const release1Branch = tester.selectBranch('release');
            const release1BranchName = yield release1Branch.start();
            chai_1.assert.equal(release1BranchName, 'release/1.0.0');
            yield release1Branch.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield release1Branch.finish();
            const feature1 = tester.selectBranch('feature');
            yield feature1.start('#1');
            yield feature1.commit('feature.txt', 'feat(scope): Added feature.txt');
            const release2Branch = tester.selectBranch('release');
            const release2BranchName = yield release2Branch.start();
            chai_1.assert.equal(release2BranchName, 'release/1.1.0');
            yield release2Branch.commit('release_bugfix.txt', 'fix(scope): Added release_bugfix.txt');
            yield tester.checkoutBranch('feature/#1');
            yield release2Branch.finish();
            yield feature1.finish('#1');
            yield tester.dispose();
        });
    });
    it('[feature #45] git flow release "1.0.0" (without generating changelog)', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tester = new GitFlowTester_1.GitFlowTester(createGitFlow(JSON.parse(`{
          "projectConfig": {
            "projectPath": "${testRepoPath}",
            "changelog": {
              "type": "None"
            }
          }
        }`)), testRepoPath);
            yield tester.init();
            const release1Branch = tester.selectBranch('release');
            const release1BranchName = yield release1Branch.start();
            chai_1.assert.equal(release1BranchName, 'release/1.0.0');
            chai_1.assert.isFalse(yield fs_extra_1.pathExists(path_1.join(testRepoPath, 'CHANGELOG.md')), 'The file CHANGELOG.md exists but should not.');
            yield tester.dispose();
        });
    });
});
function createGitFlow(config) {
    var _a;
    const avhGitFlow = new AvhGitFlow_1.AvhGitFlow(testRepoPath);
    config = config !== null && config !== void 0 ? config : {};
    config.projectConfig = (_a = config.projectConfig) !== null && _a !== void 0 ? _a : {
        projectPath: testRepoPath,
    };
    config.projectConfig.projectPath = testRepoPath;
    return new GFlow_1.GFlow(avhGitFlow, config);
}
function assertPackageJson(fileName) {
    return __awaiter(this, void 0, void 0, function* () {
        const changelog = yield fs_extra_1.readFile(path_1.join(testRepoPath, 'package.json'), 'utf8');
        const refChangelog = yield fs_extra_1.readFile(path_1.join(__dirname, 'files', fileName), 'utf8');
        chai_1.assert.equal(changelog, refChangelog);
    });
}
function assertChangelog(fileName) {
    return __awaiter(this, void 0, void 0, function* () {
        const changelog = yield fs_extra_1.readFile(path_1.join(testRepoPath, 'CHANGELOG.md'), 'utf8');
        // remove all text in brackets (hash values and dates are not unique)
        const cleanedChangelog = changelog.replace(/(\([^)]+\)\)?)/g, '').trim();
        const refChangelog = yield fs_extra_1.readFile(path_1.join(__dirname, 'files', fileName), 'utf8');
        chai_1.assert.equal(cleanedChangelog, refChangelog);
    });
}
//# sourceMappingURL=data:application/json;base64,