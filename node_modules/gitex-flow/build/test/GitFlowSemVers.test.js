"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const GitFlowSemVers_1 = require("../src/tools/GitFlowSemVers");
describe('Test semantic versioning', function () {
    it('should exclusively allow semantic versions', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const semVer = new GitFlowSemVers_1.GitFlowSemVers();
            chai_1.assert.isUndefined(yield semVer.calculateBranchVersion('release', '#37'));
            chai_1.assert.isUndefined(yield semVer.calculateBranchVersion('release', '1.2'));
            chai_1.assert.isUndefined(yield semVer.calculateBranchVersion('release', '4,3'));
            chai_1.assert.equal(yield semVer.calculateBranchVersion('release', '1.2.3'), '1.2.3');
            chai_1.assert.isUndefined(yield semVer.calculateBranchVersion('hotfix', '#37'));
            chai_1.assert.isUndefined(yield semVer.calculateBranchVersion('hotfix', '1.2'));
            chai_1.assert.isUndefined(yield semVer.calculateBranchVersion('hotfix', '4,3'));
            chai_1.assert.equal(yield semVer.calculateBranchVersion('hotfix', '1.2.3'), '1.2.3');
            chai_1.assert.equal(yield semVer.calculateBranchVersion('feature', '1.2.3'), '1.2.3');
            chai_1.assert.equal(yield semVer.calculateBranchVersion('feature', '#37'), '#37');
            chai_1.assert.equal(yield semVer.calculateBranchVersion('bugfix', '1.2.3'), '1.2.3');
            chai_1.assert.equal(yield semVer.calculateBranchVersion('bugfix', '#37'), '#37');
            chai_1.assert.equal(yield semVer.calculateBranchVersion('support', '1.2.3'), '1.2.3');
            chai_1.assert.equal(yield semVer.calculateBranchVersion('support', '#37'), '#37');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2l0Rmxvd1NlbVZlcnMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvR2l0Rmxvd1NlbVZlcnMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLCtCQUE4QjtBQUM5QixnRUFBNkQ7QUFFN0QsUUFBUSxDQUFDLDBCQUEwQixFQUFFO0lBQ25DLEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRTs7WUFDL0MsTUFBTSxNQUFNLEdBQUcsSUFBSSwrQkFBYyxFQUFFLENBQUM7WUFDcEMsYUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMxRSxhQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sTUFBTSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzFFLGFBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxNQUFNLENBQUMsc0JBQXNCLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDMUUsYUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFL0UsYUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6RSxhQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sTUFBTSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3pFLGFBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxNQUFNLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDekUsYUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFOUUsYUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDL0UsYUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFM0UsYUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDOUUsYUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFMUUsYUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDL0UsYUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0UsQ0FBQztLQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=