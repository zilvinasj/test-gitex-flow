"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestGitRepository = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const GitRepository_1 = require("../src/git/GitRepository");
/**
 * Representing a git test repository, providing some easy operations to write unit tests.
 */
class TestGitRepository extends GitRepository_1.GitRepository {
    constructor() {
        super(...arguments);
        this.fileFolderPath = path_1.resolve(path_1.join(__dirname, 'files'));
    }
    /**
     * Commits a given file (from folder 'files') to the test repo.
     *
     * @param fileName - Name of the file to be commited.
     * @param message - Commit message to be set.
     *
     * @returns The commit hash.
     */
    commitTestFile(fileName, message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.copyFileToRepo(fileName);
            return yield this.commit([fileName], message);
        });
    }
    copyFileToRepo(fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            const src = path_1.join(this.fileFolderPath, fileName);
            const dest = path_1.join(this.getRepoPath(), fileName);
            yield fs_extra_1.copy(src, dest);
        });
    }
}
exports.TestGitRepository = TestGitRepository;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdEdpdFJlcG9zaXRvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0L1Rlc3RHaXRSZXBvc2l0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHVDQUFnQztBQUNoQywrQkFBcUM7QUFDckMsNERBQXlEO0FBRXpEOztHQUVHO0FBQ0gsTUFBYSxpQkFBa0IsU0FBUSw2QkFBYTtJQUFwRDs7UUFDbUIsbUJBQWMsR0FBRyxjQUFPLENBQUMsV0FBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBb0J0RSxDQUFDO0lBbEJDOzs7Ozs7O09BT0c7SUFDVSxjQUFjLENBQUMsUUFBZ0IsRUFBRSxPQUFlOztZQUMzRCxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEMsT0FBTyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNoRCxDQUFDO0tBQUE7SUFFYSxjQUFjLENBQUMsUUFBZ0I7O1lBQzNDLE1BQU0sR0FBRyxHQUFHLFdBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sSUFBSSxHQUFHLFdBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDaEQsTUFBTSxlQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUM7S0FBQTtDQUNGO0FBckJELDhDQXFCQyJ9