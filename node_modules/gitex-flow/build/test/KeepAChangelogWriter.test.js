"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const KeepAChangelogWriter_1 = require("../src/changelog/KeepAChangelogWriter");
const Utils_1 = require("../src/tools/Utils");
const testTmpPath = path_1.resolve(path_1.join('.', 'test_tmp'));
const changelogPath = path_1.join(testTmpPath, 'CHANGELOG.md');
describe('Test Keep-A-Changelog writer implementation', function () {
    this.beforeAll(() => __awaiter(this, void 0, void 0, function* () {
        yield fs_extra_1.emptyDir(testTmpPath);
    }));
    this.afterAll(() => __awaiter(this, void 0, void 0, function* () {
        yield fs_extra_1.remove(testTmpPath);
    }));
    it('should create, parse and append changelog', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const logs = yield Utils_1.Utils.parseConventionalCommits([
                `feat(test): Added feature test.txt

      closes #78`,
                `fix(test): Fixed errors in test.txt

      closes #80`,
                `fix(service): Removed support of unencrypted HTTP protocol

      This unencrypted protocol has led to several vulnerabilities in the framework.
      
      SECURITY: Only encrypted protocols are now allowed
      BREAKING CHANGE: Removed HTTP endpoint in web service.
      
      closes #941, refs #1094, #1100`,
                `Merge tag '1.4.4' into develop

      1.4.4 1.4.4`,
            ]);
            const writer = new KeepAChangelogWriter_1.KeepAChangelogWriter({
                basePath: testTmpPath,
            });
            yield writer.write({
                version: '1.0.0',
                title: 'Test project',
                repoUrl: 'https://github.com/gitex-flow/gitex-flow-node',
                date: '2021-03-16',
            }, [logs[0]]);
            chai_1.assert.equal(yield fs_extra_1.readFile(changelogPath, 'utf8'), yield fs_extra_1.readFile(path_1.resolve(path_1.join(__dirname, 'files', 'KaC_1_0_0.md')), 'utf8'));
            yield writer.write({
                version: '1.0.1',
                title: 'Test project',
                repoUrl: 'https://github.com/gitex-flow/gitex-flow-node',
                date: '2021-03-16',
            }, [logs[1]]);
            chai_1.assert.equal(yield fs_extra_1.readFile(changelogPath, 'utf8'), yield fs_extra_1.readFile(path_1.resolve(path_1.join(__dirname, 'files', 'KaC_1_1_0.md')), 'utf8'));
            yield writer.write({
                version: '2.0.0',
                title: 'Test project',
                repoUrl: 'https://github.com/gitex-flow/gitex-flow-node',
                date: '2021-03-16',
            }, [logs[2]]);
            chai_1.assert.equal(yield fs_extra_1.readFile(changelogPath, 'utf8'), yield fs_extra_1.readFile(path_1.resolve(path_1.join(__dirname, 'files', 'KaC_2_0_0.md')), 'utf8'));
            yield writer.write({
                version: '2.0.1',
                title: 'Test project',
                repoUrl: 'https://github.com/gitex-flow/gitex-flow-node',
                date: '2021-03-16',
            }, [logs[3]]);
            chai_1.assert.equal(yield fs_extra_1.readFile(changelogPath, 'utf8'), yield fs_extra_1.readFile(path_1.resolve(path_1.join(__dirname, 'files', 'KaC_2_0_1.md')), 'utf8'));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2VlcEFDaGFuZ2Vsb2dXcml0ZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvS2VlcEFDaGFuZ2Vsb2dXcml0ZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLCtCQUE4QjtBQUM5Qix1Q0FBc0Q7QUFDdEQsK0JBQXFDO0FBQ3JDLGdGQUE2RTtBQUM3RSw4Q0FBMkM7QUFFM0MsTUFBTSxXQUFXLEdBQUcsY0FBTyxDQUFDLFdBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUNuRCxNQUFNLGFBQWEsR0FBRyxXQUFJLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXhELFFBQVEsQ0FBQyw2Q0FBNkMsRUFBRTtJQUN0RCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQVMsRUFBRTtRQUN4QixNQUFNLG1CQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxRQUFRLENBQUMsR0FBUyxFQUFFO1FBQ3ZCLE1BQU0saUJBQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUEsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDJDQUEyQyxFQUFFOztZQUM5QyxNQUFNLElBQUksR0FBRyxNQUFNLGFBQUssQ0FBQyx3QkFBd0IsQ0FBQztnQkFDaEQ7O2lCQUVXO2dCQUNYOztpQkFFVztnQkFDWDs7Ozs7OztxQ0FPK0I7Z0JBQy9COztrQkFFWTthQUNiLENBQUMsQ0FBQztZQUNILE1BQU0sTUFBTSxHQUFHLElBQUksMkNBQW9CLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxXQUFXO2FBQ3RCLENBQUMsQ0FBQztZQUNILE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FDaEI7Z0JBQ0UsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLEtBQUssRUFBRSxjQUFjO2dCQUNyQixPQUFPLEVBQUUsK0NBQStDO2dCQUN4RCxJQUFJLEVBQUUsWUFBWTthQUNuQixFQUNELENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ1YsQ0FBQztZQUNGLGFBQU0sQ0FBQyxLQUFLLENBQ1YsTUFBTSxtQkFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsRUFDckMsTUFBTSxtQkFBUSxDQUFDLGNBQU8sQ0FBQyxXQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUMxRSxDQUFDO1lBRUYsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUNoQjtnQkFDRSxPQUFPLEVBQUUsT0FBTztnQkFDaEIsS0FBSyxFQUFFLGNBQWM7Z0JBQ3JCLE9BQU8sRUFBRSwrQ0FBK0M7Z0JBQ3hELElBQUksRUFBRSxZQUFZO2FBQ25CLEVBQ0QsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDVixDQUFDO1lBQ0YsYUFBTSxDQUFDLEtBQUssQ0FDVixNQUFNLG1CQUFRLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxFQUNyQyxNQUFNLG1CQUFRLENBQUMsY0FBTyxDQUFDLFdBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQzFFLENBQUM7WUFFRixNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQ2hCO2dCQUNFLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixLQUFLLEVBQUUsY0FBYztnQkFDckIsT0FBTyxFQUFFLCtDQUErQztnQkFDeEQsSUFBSSxFQUFFLFlBQVk7YUFDbkIsRUFDRCxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNWLENBQUM7WUFDRixhQUFNLENBQUMsS0FBSyxDQUNWLE1BQU0sbUJBQVEsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLEVBQ3JDLE1BQU0sbUJBQVEsQ0FBQyxjQUFPLENBQUMsV0FBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FDMUUsQ0FBQztZQUNGLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FDaEI7Z0JBQ0UsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLEtBQUssRUFBRSxjQUFjO2dCQUNyQixPQUFPLEVBQUUsK0NBQStDO2dCQUN4RCxJQUFJLEVBQUUsWUFBWTthQUNuQixFQUNELENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ1YsQ0FBQztZQUNGLGFBQU0sQ0FBQyxLQUFLLENBQ1YsTUFBTSxtQkFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsRUFDckMsTUFBTSxtQkFBUSxDQUFDLGNBQU8sQ0FBQyxXQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUMxRSxDQUFDO1FBQ0osQ0FBQztLQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=